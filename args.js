"use strict";
exports.__esModule = true;
exports.ArgKeys = void 0;
exports.ArgKeys = {
    createNodeArray: ["elements", "hasTrailingComma"],
    createNumericLiteral: ["value", "numericLiteralFlags"],
    createBigIntLiteral: ["value"],
    createStringLiteral: ["text", "isSingleQuote", "hasExtendedUnicodeEscape"],
    createStringLiteralFromNode: ["sourceNode"],
    createRegularExpressionLiteral: ["text"],
    createLiteralLikeNode: ["kind", "text"],
    createIdentifier: ["text", "typeArguments", "originalKeywordKind"],
    updateIdentifier: ["node", "typeArguments"],
    createTempVariable: ["recordTempVariable", "reservedInNestedScopes"],
    createLoopVariable: ["reservedInNestedScopes"],
    createUniqueName: ["text", "flags"],
    getGeneratedNameForNode: ["node", "flags"],
    createPrivateIdentifier: ["text"],
    createToken: ["token"],
    createSuper: [],
    createThis: [],
    createNull: [],
    createTrue: [],
    createFalse: [],
    createModifier: ["kind"],
    createModifiersFromModifierFlags: ["flags"],
    createQualifiedName: ["left", "right"],
    updateQualifiedName: ["node", "left", "right"],
    createComputedPropertyName: ["expression"],
    updateComputedPropertyName: ["node", "expression"],
    createTypeParameterDeclaration: ["name", "constraint", "defaultType"],
    updateTypeParameterDeclaration: ["node", "name", "constraint", "defaultType"],
    createParameterDeclaration: ["decorators", "modifiers", "dotDotDotToken", "name", "questionToken", "type", "initializer"],
    updateParameterDeclaration: ["node", "decorators", "modifiers", "dotDotDotToken", "name", "questionToken", "type", "initializer"],
    createDecorator: ["expression"],
    updateDecorator: ["node", "expression"],
    createPropertySignature: ["modifiers", "name", "questionToken", "type"],
    updatePropertySignature: ["node", "modifiers", "name", "questionToken", "type"],
    createPropertyDeclaration: ["decorators", "modifiers", "name", "questionOrExclamationToken", "type", "initializer"],
    updatePropertyDeclaration: ["node", "decorators", "modifiers", "name", "questionOrExclamationToken", "type", "initializer"],
    createMethodSignature: ["modifiers", "name", "questionToken", "typeParameters", "parameters", "type"],
    updateMethodSignature: ["node", "modifiers", "name", "questionToken", "typeParameters", "parameters", "type"],
    createMethodDeclaration: ["decorators", "modifiers", "asteriskToken", "name", "questionToken", "typeParameters", "parameters", "type", "body"],
    updateMethodDeclaration: ["node", "decorators", "modifiers", "asteriskToken", "name", "questionToken", "typeParameters", "parameters", "type", "body"],
    createConstructorDeclaration: ["decorators", "modifiers", "parameters", "body"],
    updateConstructorDeclaration: ["node", "decorators", "modifiers", "parameters", "body"],
    createGetAccessorDeclaration: ["decorators", "modifiers", "name", "parameters", "type", "body"],
    updateGetAccessorDeclaration: ["node", "decorators", "modifiers", "name", "parameters", "type", "body"],
    createSetAccessorDeclaration: ["decorators", "modifiers", "name", "parameters", "body"],
    updateSetAccessorDeclaration: ["node", "decorators", "modifiers", "name", "parameters", "body"],
    createCallSignature: ["typeParameters", "parameters", "type"],
    updateCallSignature: ["node", "typeParameters", "parameters", "type"],
    createConstructSignature: ["typeParameters", "parameters", "type"],
    updateConstructSignature: ["node", "typeParameters", "parameters", "type"],
    createIndexSignature: ["decorators", "modifiers", "parameters", "type"],
    updateIndexSignature: ["node", "decorators", "modifiers", "parameters", "type"],
    createClassStaticBlockDeclaration: ["decorators", "modifiers", "body"],
    updateClassStaticBlockDeclaration: ["node", "decorators", "modifiers", "body"],
    createTemplateLiteralTypeSpan: ["type", "literal"],
    updateTemplateLiteralTypeSpan: ["node", "type", "literal"],
    createKeywordTypeNode: ["kind"],
    createTypePredicateNode: ["assertsModifier", "parameterName", "type"],
    updateTypePredicateNode: ["node", "assertsModifier", "parameterName", "type"],
    createTypeReferenceNode: ["typeName", "typeArguments"],
    updateTypeReferenceNode: ["node", "typeName", "typeArguments"],
    createFunctionTypeNode: ["typeParameters", "parameters", "type"],
    updateFunctionTypeNode: ["node", "typeParameters", "parameters", "type"],
    createConstructorTypeNode: [],
    updateConstructorTypeNode: [],
    createTypeQueryNode: ["exprName"],
    updateTypeQueryNode: ["node", "exprName"],
    createTypeLiteralNode: ["members"],
    updateTypeLiteralNode: ["node", "members"],
    createArrayTypeNode: ["elementType"],
    updateArrayTypeNode: ["node", "elementType"],
    createTupleTypeNode: ["elements"],
    updateTupleTypeNode: ["node", "elements"],
    createNamedTupleMember: ["dotDotDotToken", "name", "questionToken", "type"],
    updateNamedTupleMember: ["node", "dotDotDotToken", "name", "questionToken", "type"],
    createOptionalTypeNode: ["type"],
    updateOptionalTypeNode: ["node", "type"],
    createRestTypeNode: ["type"],
    updateRestTypeNode: ["node", "type"],
    createUnionTypeNode: ["types"],
    updateUnionTypeNode: ["node", "types"],
    createIntersectionTypeNode: ["types"],
    updateIntersectionTypeNode: ["node", "types"],
    createConditionalTypeNode: ["checkType", "extendsType", "trueType", "falseType"],
    updateConditionalTypeNode: ["node", "checkType", "extendsType", "trueType", "falseType"],
    createInferTypeNode: ["typeParameter"],
    updateInferTypeNode: ["node", "typeParameter"],
    createImportTypeNode: ["argument", "qualifier", "typeArguments", "isTypeOf"],
    updateImportTypeNode: ["node", "argument", "qualifier", "typeArguments", "isTypeOf"],
    createParenthesizedType: ["type"],
    updateParenthesizedType: ["node", "type"],
    createThisTypeNode: [],
    createTypeOperatorNode: ["operator", "type"],
    updateTypeOperatorNode: ["node", "type"],
    createIndexedAccessTypeNode: ["objectType", "indexType"],
    updateIndexedAccessTypeNode: ["node", "objectType", "indexType"],
    createMappedTypeNode: ["readonlyToken", "typeParameter", "nameType", "questionToken", "type", "members"],
    updateMappedTypeNode: ["node", "readonlyToken", "typeParameter", "nameType", "questionToken", "type", "members"],
    createLiteralTypeNode: ["literal"],
    updateLiteralTypeNode: ["node", "literal"],
    createTemplateLiteralType: ["head", "templateSpans"],
    updateTemplateLiteralType: ["node", "head", "templateSpans"],
    createObjectBindingPattern: ["elements"],
    updateObjectBindingPattern: ["node", "elements"],
    createArrayBindingPattern: ["elements"],
    updateArrayBindingPattern: ["node", "elements"],
    createBindingElement: ["dotDotDotToken", "propertyName", "name", "initializer"],
    updateBindingElement: ["node", "dotDotDotToken", "propertyName", "name", "initializer"],
    createArrayLiteralExpression: ["elements", "multiLine"],
    updateArrayLiteralExpression: ["node", "elements"],
    createObjectLiteralExpression: ["properties", "multiLine"],
    updateObjectLiteralExpression: ["node", "properties"],
    createPropertyAccessExpression: ["expression", "name"],
    updatePropertyAccessExpression: ["node", "expression", "name"],
    createPropertyAccessChain: ["expression", "questionDotToken", "name"],
    updatePropertyAccessChain: ["node", "expression", "questionDotToken", "name"],
    createElementAccessExpression: ["expression", "index"],
    updateElementAccessExpression: ["node", "expression", "argumentExpression"],
    createElementAccessChain: ["expression", "questionDotToken", "index"],
    updateElementAccessChain: ["node", "expression", "questionDotToken", "argumentExpression"],
    createCallExpression: ["expression", "typeArguments", "argumentsArray"],
    updateCallExpression: ["node", "expression", "typeArguments", "argumentsArray"],
    createCallChain: ["expression", "questionDotToken", "typeArguments", "argumentsArray"],
    updateCallChain: ["node", "expression", "questionDotToken", "typeArguments", "argumentsArray"],
    createNewExpression: ["expression", "typeArguments", "argumentsArray"],
    updateNewExpression: ["node", "expression", "typeArguments", "argumentsArray"],
    createTaggedTemplateExpression: ["tag", "typeArguments", "template"],
    updateTaggedTemplateExpression: ["node", "tag", "typeArguments", "template"],
    createTypeAssertion: ["type", "expression"],
    updateTypeAssertion: ["node", "type", "expression"],
    createParenthesizedExpression: ["expression"],
    updateParenthesizedExpression: ["node", "expression"],
    createFunctionExpression: ["modifiers", "asteriskToken", "name", "typeParameters", "parameters", "type", "body"],
    updateFunctionExpression: ["node", "modifiers", "asteriskToken", "name", "typeParameters", "parameters", "type", "body"],
    createArrowFunction: ["modifiers", "typeParameters", "parameters", "type", "equalsGreaterThanToken", "body"],
    updateArrowFunction: ["node", "modifiers", "typeParameters", "parameters", "type", "equalsGreaterThanToken", "body"],
    createDeleteExpression: ["expression"],
    updateDeleteExpression: ["node", "expression"],
    createTypeOfExpression: ["expression"],
    updateTypeOfExpression: ["node", "expression"],
    createVoidExpression: ["expression"],
    updateVoidExpression: ["node", "expression"],
    createAwaitExpression: ["expression"],
    updateAwaitExpression: ["node", "expression"],
    createPrefixUnaryExpression: ["operator", "operand"],
    updatePrefixUnaryExpression: ["node", "operand"],
    createPostfixUnaryExpression: ["operand", "operator"],
    updatePostfixUnaryExpression: ["node", "operand"],
    createBinaryExpression: ["left", "operator", "right"],
    updateBinaryExpression: ["node", "left", "operator", "right"],
    createConditionalExpression: ["condition", "questionToken", "whenTrue", "colonToken", "whenFalse"],
    updateConditionalExpression: ["node", "condition", "questionToken", "whenTrue", "colonToken", "whenFalse"],
    createTemplateExpression: ["head", "templateSpans"],
    updateTemplateExpression: ["node", "head", "templateSpans"],
    createTemplateHead: ["text", "rawText", "templateFlags"],
    createTemplateMiddle: ["text", "rawText", "templateFlags"],
    createTemplateTail: ["text", "rawText", "templateFlags"],
    createNoSubstitutionTemplateLiteral: ["text", "rawText", "templateFlags"],
    createTemplateLiteralLikeNode: ["kind", "text", "rawText", "templateFlags"],
    createYieldExpression: ["asteriskToken", "expression"],
    updateYieldExpression: ["node", "asteriskToken", "expression"],
    createSpreadElement: ["expression"],
    updateSpreadElement: ["node", "expression"],
    createClassExpression: ["decorators", "modifiers", "name", "typeParameters", "heritageClauses", "members"],
    updateClassExpression: ["node", "decorators", "modifiers", "name", "typeParameters", "heritageClauses", "members"],
    createOmittedExpression: [],
    createExpressionWithTypeArguments: ["expression", "typeArguments"],
    updateExpressionWithTypeArguments: ["node", "expression", "typeArguments"],
    createAsExpression: ["expression", "type"],
    updateAsExpression: ["node", "expression", "type"],
    createNonNullExpression: ["expression"],
    updateNonNullExpression: ["node", "expression"],
    createNonNullChain: ["expression"],
    updateNonNullChain: ["node", "expression"],
    createMetaProperty: ["keywordToken", "name"],
    updateMetaProperty: ["node", "name"],
    createTemplateSpan: ["expression", "literal"],
    updateTemplateSpan: ["node", "expression", "literal"],
    createSemicolonClassElement: [],
    createBlock: ["statements", "multiLine"],
    updateBlock: ["node", "statements"],
    createVariableStatement: ["modifiers", "declarationList"],
    updateVariableStatement: ["node", "modifiers", "declarationList"],
    createEmptyStatement: [],
    createExpressionStatement: ["expression"],
    updateExpressionStatement: ["node", "expression"],
    createIfStatement: ["expression", "thenStatement", "elseStatement"],
    updateIfStatement: ["node", "expression", "thenStatement", "elseStatement"],
    createDoStatement: ["statement", "expression"],
    updateDoStatement: ["node", "statement", "expression"],
    createWhileStatement: ["expression", "statement"],
    updateWhileStatement: ["node", "expression", "statement"],
    createForStatement: ["initializer", "condition", "incrementor", "statement"],
    updateForStatement: ["node", "initializer", "condition", "incrementor", "statement"],
    createForInStatement: ["initializer", "expression", "statement"],
    updateForInStatement: ["node", "initializer", "expression", "statement"],
    createForOfStatement: ["awaitModifier", "initializer", "expression", "statement"],
    updateForOfStatement: ["node", "awaitModifier", "initializer", "expression", "statement"],
    createContinueStatement: ["label"],
    updateContinueStatement: ["node", "label"],
    createBreakStatement: ["label"],
    updateBreakStatement: ["node", "label"],
    createReturnStatement: ["expression"],
    updateReturnStatement: ["node", "expression"],
    createWithStatement: ["expression", "statement"],
    updateWithStatement: ["node", "expression", "statement"],
    createSwitchStatement: ["expression", "caseBlock"],
    updateSwitchStatement: ["node", "expression", "caseBlock"],
    createLabeledStatement: ["label", "statement"],
    updateLabeledStatement: ["node", "label", "statement"],
    createThrowStatement: ["expression"],
    updateThrowStatement: ["node", "expression"],
    createTryStatement: ["tryBlock", "catchClause", "finallyBlock"],
    updateTryStatement: ["node", "tryBlock", "catchClause", "finallyBlock"],
    createDebuggerStatement: [],
    createVariableDeclaration: ["name", "exclamationToken", "type", "initializer"],
    updateVariableDeclaration: ["node", "name", "exclamationToken", "type", "initializer"],
    createVariableDeclarationList: ["declarations", "flags"],
    updateVariableDeclarationList: ["node", "declarations"],
    createFunctionDeclaration: ["decorators", "modifiers", "asteriskToken", "name", "typeParameters", "parameters", "type", "body"],
    updateFunctionDeclaration: ["node", "decorators", "modifiers", "asteriskToken", "name", "typeParameters", "parameters", "type", "body"],
    createClassDeclaration: ["decorators", "modifiers", "name", "typeParameters", "heritageClauses", "members"],
    updateClassDeclaration: ["node", "decorators", "modifiers", "name", "typeParameters", "heritageClauses", "members"],
    createInterfaceDeclaration: ["decorators", "modifiers", "name", "typeParameters", "heritageClauses", "members"],
    updateInterfaceDeclaration: ["node", "decorators", "modifiers", "name", "typeParameters", "heritageClauses", "members"],
    createTypeAliasDeclaration: ["decorators", "modifiers", "name", "typeParameters", "type"],
    updateTypeAliasDeclaration: ["node", "decorators", "modifiers", "name", "typeParameters", "type"],
    createEnumDeclaration: ["decorators", "modifiers", "name", "members"],
    updateEnumDeclaration: ["node", "decorators", "modifiers", "name", "members"],
    createModuleDeclaration: ["decorators", "modifiers", "name", "body", "flags"],
    updateModuleDeclaration: ["node", "decorators", "modifiers", "name", "body"],
    createModuleBlock: ["statements"],
    updateModuleBlock: ["node", "statements"],
    createCaseBlock: ["clauses"],
    updateCaseBlock: ["node", "clauses"],
    createNamespaceExportDeclaration: ["name"],
    updateNamespaceExportDeclaration: ["node", "name"],
    createImportEqualsDeclaration: ["decorators", "modifiers", "isTypeOnly", "name", "moduleReference"],
    updateImportEqualsDeclaration: ["node", "decorators", "modifiers", "isTypeOnly", "name", "moduleReference"],
    createImportDeclaration: ["decorators", "modifiers", "importClause", "moduleSpecifier", "assertClause"],
    updateImportDeclaration: ["node", "decorators", "modifiers", "importClause", "moduleSpecifier", "assertClause"],
    createImportClause: ["isTypeOnly", "name", "namedBindings"],
    updateImportClause: ["node", "isTypeOnly", "name", "namedBindings"],
    createAssertClause: ["elements", "multiLine"],
    updateAssertClause: ["node", "elements", "multiLine"],
    createAssertEntry: ["name", "value"],
    updateAssertEntry: ["node", "name", "value"],
    createNamespaceImport: ["name"],
    updateNamespaceImport: ["node", "name"],
    createNamespaceExport: ["name"],
    updateNamespaceExport: ["node", "name"],
    createNamedImports: ["elements"],
    updateNamedImports: ["node", "elements"],
    createImportSpecifier: ["isTypeOnly", "propertyName", "name"],
    updateImportSpecifier: ["node", "isTypeOnly", "propertyName", "name"],
    createExportAssignment: ["decorators", "modifiers", "isExportEquals", "expression"],
    updateExportAssignment: ["node", "decorators", "modifiers", "expression"],
    createExportDeclaration: ["decorators", "modifiers", "isTypeOnly", "exportClause", "moduleSpecifier", "assertClause"],
    updateExportDeclaration: ["node", "decorators", "modifiers", "isTypeOnly", "exportClause", "moduleSpecifier", "assertClause"],
    createNamedExports: ["elements"],
    updateNamedExports: ["node", "elements"],
    createExportSpecifier: ["isTypeOnly", "propertyName", "name"],
    updateExportSpecifier: ["node", "isTypeOnly", "propertyName", "name"],
    createMissingDeclaration: [],
    createExternalModuleReference: ["expression"],
    updateExternalModuleReference: ["node", "expression"],
    createJSDocAllType: [],
    createJSDocUnknownType: [],
    createJSDocNonNullableType: ["type"],
    updateJSDocNonNullableType: ["node", "type"],
    createJSDocNullableType: ["type"],
    updateJSDocNullableType: ["node", "type"],
    createJSDocOptionalType: ["type"],
    updateJSDocOptionalType: ["node", "type"],
    createJSDocVariadicType: ["type"],
    updateJSDocVariadicType: ["node", "type"],
    createJSDocNamepathType: ["type"],
    updateJSDocNamepathType: ["node", "type"],
    createJSDocFunctionType: ["parameters", "type"],
    updateJSDocFunctionType: ["node", "parameters", "type"],
    createJSDocTypeLiteral: ["propertyTags", "isArrayType"],
    updateJSDocTypeLiteral: ["node", "propertyTags", "isArrayType"],
    createJSDocTypeExpression: ["type"],
    updateJSDocTypeExpression: ["node", "type"],
    createJSDocSignature: ["typeParameters", "parameters", "type"],
    updateJSDocSignature: ["node", "typeParameters", "parameters", "type"],
    createJSDocTemplateTag: ["tagName", "constraint", "typeParameters", "comment"],
    updateJSDocTemplateTag: ["node", "tagName", "constraint", "typeParameters", "comment"],
    createJSDocTypedefTag: ["tagName", "typeExpression", "fullName", "comment"],
    updateJSDocTypedefTag: ["node", "tagName", "typeExpression", "fullName", "comment"],
    createJSDocParameterTag: ["tagName", "name", "isBracketed", "typeExpression", "isNameFirst", "comment"],
    updateJSDocParameterTag: ["node", "tagName", "name", "isBracketed", "typeExpression", "isNameFirst", "comment"],
    createJSDocPropertyTag: ["tagName", "name", "isBracketed", "typeExpression", "isNameFirst", "comment"],
    updateJSDocPropertyTag: ["node", "tagName", "name", "isBracketed", "typeExpression", "isNameFirst", "comment"],
    createJSDocCallbackTag: ["tagName", "typeExpression", "fullName", "comment"],
    updateJSDocCallbackTag: ["node", "tagName", "typeExpression", "fullName", "comment"],
    createJSDocAugmentsTag: ["tagName", "className", "comment"],
    updateJSDocAugmentsTag: ["node", "tagName", "className", "comment"],
    createJSDocImplementsTag: ["tagName", "className", "comment"],
    updateJSDocImplementsTag: ["node", "tagName", "className", "comment"],
    createJSDocSeeTag: ["tagName", "name", "comment"],
    updateJSDocSeeTag: ["node", "tagName", "name", "comment"],
    createJSDocNameReference: ["name"],
    updateJSDocNameReference: ["node", "name"],
    createJSDocMemberName: ["left", "right"],
    updateJSDocMemberName: ["node", "left", "right"],
    createJSDocLink: ["name", "text"],
    updateJSDocLink: ["node", "name", "text"],
    createJSDocLinkCode: ["name", "text"],
    updateJSDocLinkCode: ["node", "name", "text"],
    createJSDocLinkPlain: ["name", "text"],
    updateJSDocLinkPlain: ["node", "name", "text"],
    createJSDocTypeTag: ["tagName", "typeExpression", "comment"],
    updateJSDocTypeTag: ["node", "tagName", "typeExpression", "comment"],
    createJSDocReturnTag: ["tagName", "typeExpression", "comment"],
    updateJSDocReturnTag: ["node", "tagName", "typeExpression", "comment"],
    createJSDocThisTag: ["tagName", "typeExpression", "comment"],
    updateJSDocThisTag: ["node", "tagName", "typeExpression", "comment"],
    createJSDocEnumTag: ["tagName", "typeExpression", "comment"],
    updateJSDocEnumTag: ["node", "tagName", "typeExpression", "comment"],
    createJSDocAuthorTag: ["tagName", "comment"],
    updateJSDocAuthorTag: ["node", "tagName", "comment"],
    createJSDocClassTag: ["tagName", "comment"],
    updateJSDocClassTag: ["node", "tagName", "comment"],
    createJSDocPublicTag: ["tagName", "comment"],
    updateJSDocPublicTag: ["node", "tagName", "comment"],
    createJSDocPrivateTag: ["tagName", "comment"],
    updateJSDocPrivateTag: ["node", "tagName", "comment"],
    createJSDocProtectedTag: ["tagName", "comment"],
    updateJSDocProtectedTag: ["node", "tagName", "comment"],
    createJSDocReadonlyTag: ["tagName", "comment"],
    updateJSDocReadonlyTag: ["node", "tagName", "comment"],
    createJSDocOverrideTag: ["tagName", "comment"],
    updateJSDocOverrideTag: ["node", "tagName", "comment"],
    createJSDocDeprecatedTag: ["tagName", "comment"],
    updateJSDocDeprecatedTag: ["node", "tagName", "comment"],
    createJSDocUnknownTag: ["tagName", "comment"],
    updateJSDocUnknownTag: ["node", "tagName", "comment"],
    createJSDocText: ["text"],
    updateJSDocText: ["node", "text"],
    createJSDocComment: ["comment", "tags"],
    updateJSDocComment: ["node", "comment", "tags"],
    createJsxElement: ["openingElement", "children", "closingElement"],
    updateJsxElement: ["node", "openingElement", "children", "closingElement"],
    createJsxSelfClosingElement: ["tagName", "typeArguments", "attributes"],
    updateJsxSelfClosingElement: ["node", "tagName", "typeArguments", "attributes"],
    createJsxOpeningElement: ["tagName", "typeArguments", "attributes"],
    updateJsxOpeningElement: ["node", "tagName", "typeArguments", "attributes"],
    createJsxClosingElement: ["tagName"],
    updateJsxClosingElement: ["node", "tagName"],
    createJsxFragment: ["openingFragment", "children", "closingFragment"],
    createJsxText: ["text", "containsOnlyTriviaWhiteSpaces"],
    updateJsxText: ["node", "text", "containsOnlyTriviaWhiteSpaces"],
    createJsxOpeningFragment: [],
    createJsxJsxClosingFragment: [],
    updateJsxFragment: ["node", "openingFragment", "children", "closingFragment"],
    createJsxAttribute: ["name", "initializer"],
    updateJsxAttribute: ["node", "name", "initializer"],
    createJsxAttributes: ["properties"],
    updateJsxAttributes: ["node", "properties"],
    createJsxSpreadAttribute: ["expression"],
    updateJsxSpreadAttribute: ["node", "expression"],
    createJsxExpression: ["dotDotDotToken", "expression"],
    updateJsxExpression: ["node", "expression"],
    createCaseClause: ["expression", "statements"],
    updateCaseClause: ["node", "expression", "statements"],
    createDefaultClause: ["statements"],
    updateDefaultClause: ["node", "statements"],
    createHeritageClause: ["token", "types"],
    updateHeritageClause: ["node", "types"],
    createCatchClause: ["variableDeclaration", "block"],
    updateCatchClause: ["node", "variableDeclaration", "block"],
    createPropertyAssignment: ["name", "initializer"],
    updatePropertyAssignment: ["node", "name", "initializer"],
    createShorthandPropertyAssignment: ["name", "objectAssignmentInitializer"],
    updateShorthandPropertyAssignment: ["node", "name", "objectAssignmentInitializer"],
    createSpreadAssignment: ["expression"],
    updateSpreadAssignment: ["node", "expression"],
    createEnumMember: ["name", "initializer"],
    updateEnumMember: ["node", "name", "initializer"],
    createSourceFile: ["statements", "endOfFileToken", "flags"],
    updateSourceFile: ["node", "statements", "isDeclarationFile", "referencedFiles", "typeReferenceDirectives", "hasNoDefaultLib", "libReferenceDirectives"],
    createBundle: ["sourceFiles", "prepends"],
    updateBundle: ["node", "sourceFiles", "prepends"],
    createUnparsedSource: ["prologues", "syntheticReferences", "texts"],
    createUnparsedPrologue: ["data"],
    createUnparsedPrepend: ["data", "texts"],
    createUnparsedTextLike: ["data", "internal"],
    createUnparsedSyntheticReference: ["section"],
    createInputFiles: [],
    createSyntheticExpression: ["type", "isSpread", "tupleNameSource"],
    createSyntaxList: ["children"],
    createNotEmittedStatement: ["original"],
    createPartiallyEmittedExpression: ["expression", "original"],
    updatePartiallyEmittedExpression: ["node", "expression"],
    createCommaListExpression: ["elements"],
    updateCommaListExpression: ["node", "elements"],
    createEndOfDeclarationMarker: ["original"],
    createMergeDeclarationMarker: ["original"],
    createSyntheticReferenceExpression: ["expression", "thisArg"],
    updateSyntheticReferenceExpression: ["node", "expression", "thisArg"],
    cloneNode: ["node"],
    createComma: ["left", "right"],
    createAssignment: ["left", "right"],
    createLogicalOr: ["left", "right"],
    createLogicalAnd: ["left", "right"],
    createBitwiseOr: ["left", "right"],
    createBitwiseXor: ["left", "right"],
    createBitwiseAnd: ["left", "right"],
    createStrictEquality: ["left", "right"],
    createStrictInequality: ["left", "right"],
    createEquality: ["left", "right"],
    createInequality: ["left", "right"],
    createLessThan: ["left", "right"],
    createLessThanEquals: ["left", "right"],
    createGreaterThan: ["left", "right"],
    createGreaterThanEquals: ["left", "right"],
    createLeftShift: ["left", "right"],
    createRightShift: ["left", "right"],
    createUnsignedRightShift: ["left", "right"],
    createAdd: ["left", "right"],
    createSubtract: ["left", "right"],
    createMultiply: ["left", "right"],
    createDivide: ["left", "right"],
    createModulo: ["left", "right"],
    createExponent: ["left", "right"],
    createPrefixPlus: ["operand"],
    createPrefixMinus: ["operand"],
    createPrefixIncrement: ["operand"],
    createPrefixDecrement: ["operand"],
    createBitwiseNot: ["operand"],
    createLogicalNot: ["operand"],
    createPostfixIncrement: ["operand"],
    createPostfixDecrement: ["operand"],
    createImmediatelyInvokedFunctionExpression: ["statements", "param", "paramValue"],
    createImmediatelyInvokedArrowFunction: ["statements", "param", "paramValue"],
    createVoidZero: [],
    createExportDefault: ["expression"],
    createExternalModuleExport: ["exportName"],
    createTypeCheck: ["value", "tag"],
    createMethodCall: ["object", "methodName", "argumentsList"],
    createGlobalMethodCall: ["globalObjectName", "methodName", "argumentsList"],
    createFunctionBindCall: ["target", "thisArg", "argumentsList"],
    createFunctionCallCall: ["target", "thisArg", "argumentsList"],
    createFunctionApplyCall: ["target", "thisArg", "argumentsExpression"],
    createArraySliceCall: ["array", "start"],
    createArrayConcatCall: ["array", "argumentsList"],
    createObjectDefinePropertyCall: ["target", "propertyName", "attributes"],
    createReflectGetCall: ["target", "propertyKey", "receiver"],
    createReflectSetCall: ["target", "propertyKey", "value", "receiver"],
    createPropertyDescriptor: ["attributes", "singleLine"],
    createCallBinding: ["expression", "recordTempVariable", "languageVersion", "cacheIdentifiers"],
    createAssignmentTargetWrapper: ["paramName", "expression"],
    inlineExpressions: ["expressions"],
    getInternalName: ["node", "allowComments", "allowSourceMaps"],
    getLocalName: ["node", "allowComments", "allowSourceMaps"],
    getExportName: ["node", "allowComments", "allowSourceMaps"],
    getDeclarationName: ["node", "allowComments", "allowSourceMaps"],
    getNamespaceMemberName: ["ns", "name", "allowComments", "allowSourceMaps"],
    getExternalModuleOrNamespaceExportName: ["ns", "node", "allowComments", "allowSourceMaps"],
    restoreOuterExpressions: ["outerExpression", "innerExpression", "kinds"],
    restoreEnclosingLabel: ["node", "outermostLabeledStatement", "afterRestoreLabelCallback"],
    createUseStrictPrologue: [],
    copyPrologue: ["source", "target", "ensureUseStrict", "visitor"],
    copyStandardPrologue: ["source", "target", "statementOffset", "ensureUseStrict"],
    copyCustomPrologue: ["source", "target", "statementOffset", "visitor", "filter"],
    ensureUseStrict: ["statements"],
    liftToBlock: ["nodes"],
    mergeLexicalEnvironment: ["statements", "declarations"],
    updateModifiers: ["node", "modifiers"]
};
